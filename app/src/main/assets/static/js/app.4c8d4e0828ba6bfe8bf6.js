webpackJsonp([0],{"7zck":function(e,t){},EO8Z:function(e,t){},NHnr:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=s("7+uW"),i=s("TXmL");a.default.use(i.a);var n=new i.a({locale:"en",fallbackLocale:"ua",messages:{en:{chooseLanguage:"Choose your language",toGetCorrectData:"For convenient use of the application and obtaining relevant results, it is necessary to observe the rules of forming syntactic constructions, which is a prerequisite for correct recognition of the entered commands. Below is the commands description and examples of their use.",important:"Warning",atTheMoment:"at the moment this application supports Java SE7 only. It does not provide user error checking and automatic type completion. Java annotations are not supported, at the moment. It is also necessary to be careful with closing and opening blocks, since they guarantee the absence of recognition errors.",classCreation:"Class Creation",toCreateClass:"To create a class, you need to use the following template (in square brackets there are constructs, the presence of which are not mandatory):",className:"class name",interfacesList:'list of interface names, divided by comma of the word "and"',exampleU:"Example:",resultU:"Output:",variablesDeclaring:"Variables Declaring",toDeclareVariable:"Use the following template to declare variables:",variableName:"variable name",typeName:"type name",bySeparator:'To declare generic types use the reserved word "by" and the word "separator" during the declaration of complex structures:',templateTypeName:"template type name",anyExtends:'If the template type of the generic class is unknown, but it must be a child of some class, the reserved phrase "any extends" is used:',inTable:"The following table describes the symbols of mathematical operations and their verbal equivalents:",numberLow:"number",symbolU:"Symbol",equivalentU:"Equivalent",fieldsMethodsAccess:"Fields and Methods Access",toAccessFields:"To access the object's field, use the following syntax:",toAccessMethods:"and to call the method of the object, use the following template:",fieldName:"field name",methodName:"method name",arraysAccess:"Arrays",toCreateArray:'To create arrays, you must use the keyword "array", specifying all dimensions of the array with the keyword "dimensional". To separate an array type and its name when its dimension is more than 1, use the word "by" without the word "dimensional". If some of the dimensions are dynamic, that is, they should be calculated during execution, use the keyword "generic" or "empty".',importantArray:"this application does not automatically calculate dimensions of the arrays!",initializedBy:'To initialize an array or collection while creating a new object, use the "initialized by" command.',accessArrayElement:'To access the array element, use the keyword "at":',newRow:'It is recommended to use the key phrase "new row" to split expressions. It is mandatory when names of the variables are consecutive in a line, because this phrase is used to divide those names correctly, as shown in the previous example.',toPassArgumentsConstr:'To pass the arguments to the constructor while creating a new object, you must use the command "with argument / arguments". You can split arguments by the word "and" or "comma".',typesCasting:"Types Casting",toCastType:'To cast the type you need to use the "casted to" command.',ifElseUsage:"To use conditional operators, use the following command input pattern:",condition:"condition",and:"and",whileDoWhile:'For the "while" and "do / while" loops use the following patterns:',someOperations:"some operations",switchUsage:"Use the following template to create a multi-select operator:",argumentL:"argument",forLoops:'To create \'for\' loops, you can use any of the following templates (existence or absence of the word "each" will not affect the recognition and output). Use of the word "from" in the "for-in-range" construct is recommended before the first argument of the range:',variableInitialization:"iterator initialization",iteratorBehaviour:"iterator behaviour (increment, decrement)",variableType:"variable type",initializationValue:"initialization value",numberOrSymbol:"number of character",object:"object",ternary:'To enter ternary operations, use the keyword "ternary". The division of the conditions, the main and alternative results must be done using the words "if", "then" and "else".',operations:"Operations",firstOption:"first option",secondOption:"second option",classFieldsMethods:"Class Fields and Methods",toCreateMethod:"To create a class method, use the following template (square brackets contain optional construction elements):",parametersList:"parameters list",importantToRemember1:"It's important to note that when you create a method, you define its",parameters:"parameters",importantToRemember2:"and during its call you pass",arguments:"arguments",importantToRemember3:' to it. However, for the simplification of the creation process, the possibility of using both constructs is realized. You need to split the parameters with the words "and" or "comma". To specify the resulting type use the keyword "returning". If the type is not specified, the function returns the void type.',toAddField:"Use the following template to add field to the class:",tryCatchUsage:"Using the try / catch in this app is not different from the usual coding, with some exceptions. Quite often during the development it is necessary to output the error stack in the console, so the special command «and print» for this case was added. Also, if you only use the catch word, a universal exception handler will be added. This is demonstrated by the example below.",tryWith:'To use the "try-with-params" construct after the word "try" you must use the word "with" and specify the necessary arguments to execute.',codeGen:"Code Generation",toGenCode:"Use the following template to generate the code:",toGenCodeForSpecific:"To generate getter or setter for a specific field use these templates:",staticFieldsMethods:"Static Fields & Methods",staticClass:"To access static methods and fields of the class use the following pattern:",usefulCommands:"Useful Commands",itUsage:'If you wish to modify somehow the last entered statement, you should use the specific command with "it" keyword.',removeIt:"To remove the last entered statement you can use both next templates:",initializeIt:'To initialize the last entered variable or field you can use the following pattern with "it" keyword:',expression:"expression",continueTo:'To simplify switching between scopes the special "continue to" command was added. It allows you to switch to previous scope you specify. Use the following template:',whichOne:"which one",previousMethod:"previous method scope",previousDo:"previous do-while scope",previousFor:"previous for-loop scope",previousIf:"previous if statement",previousElse:"previous if statement and its else scope",previousSwitch:"previous switch scope",previousCase:"finds previous switch statement and indicated case in its scope",previousDefault:"finds previous switch statement and its default",previousTry:"previous try-catch statement",previousCatch:"previous try-catch statement and specific case",previousFinally:"previous try-catch statement and its finally scope",previousWhile:"previous while-loop",sout:'To simplify printing lines to console "s out" command was added:'},ua:{chooseLanguage:"Оберіть мову",toGetCorrectData:"Для отримання актуальних результатів необхідно дотримуватись правил формування синтаксичних конструкцій, що є умовою коректного розпізнавання введених команд. Нижче описано команди та наведено приклади їх використання.",important:"Важливо",atTheMoment:"Наразі додаток реалізує голосовий ввід коду лише для мови програмування Java . В даному додатку повністю відсутня перевірка помилок користувача, не підтримуються анотації Java та автоматична підстановка типів! Також особливо уважним необхідно бути з закриваючими та відкриваючими блоками, оскільки саме вони гарантують відсутність помилок розпізнавання.",classCreation:"Створення класів",toCreateClass:"Для створення класу необхідно скористатись наступним шаблоном (в квадратних дужках вказано конструкції, наявність яких не є обов’язковою):",className:"назва класу",interfacesList:'перелік назв інтерфейсів, розділяючи комою чи словом "and"',exampleU:"Приклад:",resultU:"Результат:",variablesDeclaring:"Оголошення змінних",toDeclareVariable:"Для оголошення змінних необхідно скористатись наступним шаблоном:",variableName:"назва змінної",typeName:"назва типу",bySeparator:"Для використання універсальних типів використовується службове слово «BY», а під час оголошення складних конструкцій використовується службове слово «separator»:",templateTypeName:"назва шаблонізуючого типу",anyExtends:"Якщо типу шаблонізуючого класу невідомо, проте він має бути дочірнім від класу, використовується службова конструкція «any extends»:",inTable:"В таблиці нижче подано відповідності символів математичних операцій та їх словесних відповідників:",numberLow:"число",symbolU:"Символ",equivalentU:"Відповідник",fieldsMethodsAccess:"Доступ до полів та методів об'єкту",toAccessFields:"Щоб отримати доступ до поля об’єкту необхідно скористатись наступною синтаксичною конструкцією:",toAccessMethods:"а щоб викликати метод об’єкта, шаблоном нижче:",fieldName:"назва поля",methodName:"назва методу",arraysAccess:"Масиви",toCreateArray:"Для створення масивів необхідно використовувати ключове слово «array» з вказанням всіх розмірностей масиву ключовим словом «dimensional». Для розділення типу масиву та його ім’я За розмірності масиву більше 1, використовуйте слово «by» для розділення розмірностей без слова «dimensional». Якщо деякі з розмірностей динамічні, тобто їх має бути підраховано під час виконання, використовуйте ключове слово «generic» або «empty».",importantArray:"даний додаток не виконує автоматичний підрахунок розмірностей масивів!",initializedBy:"Для ініціалізації масиву чи колекції під час створення нового об’єкту необхідно скористатись командою «initialized by».",accessArrayElement:"Для отримання доступу до елементу масиву, використовуйте ключове слово «at»:",newRow:"Рекомендовано використовувати ключовий вираз «new row» для розділення виразів. Обов’язковими є ситуації, коли назви змінних йдуть підряд, як було продемонстровано в попередньому прикладі.",toPassArgumentsConstr:"Для передачі аргументів конструктору при створенні нового об’єкту необхідно використати команди «with argument / arguments». Розділяти аргументи можна словом «and» чи «comma».",typesCasting:"Приведення типів",toCastType:"Для приведення типів необхідно скористатись командою «casted to».",ifElseUsage:"Для використання умовних операторів необхідно скористатись наступним шаблоном введення команд:",condition:"умова",and:"та",whileDoWhile:"Для циклів while та do/while наступні шаблони",someOperations:"певні операції",switchUsage:"Для створення оператора множинного вибору використовуйте наступний шаблон:",argumentL:"аргумент",forLoops:"Для створення циклів for можна скористатись будь-яким з перерахованих нижче шаблонів (вживання або пропуск слова «each» не вплинуть на результат розпізнавання конструкції; за використання конструкції «for-in-range» рекомендовано використовувати слово «from» перед першим аргументом діапазону):",variableInitialization:"ініціалізація ітератора",iteratorBehaviour:"поведінка ітератора (інкремент, декремент)",variableType:"тип змінної",initializationValue:"значення для ініціалізації",numberOrSymbol:"цифра чи символ",object:"об’єкт",ternary:"Для введення тернарних операцій необхідно скористатись ключовим словом «ternary». Розділення умови, головного та альтернативного результатів необхідно робити, використовуючи слова «if», «then» та «else».",operations:"Операції",firstOption:"перший результат",secondOption:"альтернатива",classFieldsMethods:"Поля та методи класу",toCreateMethod:"Для створення методу класу необхідно використати наступний шаблон (в квадратних дужках необов'язкові елементи конструкції):",parametersList:"перелік параметрів",importantToRemember1:"Важливо зауважити, що під час створення методу ви визначаєте його",parameters:"параметри,",importantToRemember2:"а під час його виклику ви передаєте йому",arguments:"аргументи",importantToRemember3:". Проте, для спрощення процедури створення реалізовано можливість використання обох конструкцій. Розділяти параметри необхідно словами «and» чи «comma». Для вказання результуючого типу використовується слово «returning». Якщо тип не вказано функція повертає тип void.",toAddField:"Для створення поля класу використовуйте наступний шаблон:",tryCatchUsage:"Використання конструкції «try/catch» нічим не відрізняється від звичайного набирання коду, за виключенням деяких аспектів. Оскільки доволі часто під час програмування необхідно вивести стек помилки в консоль, було додано спеціальну команду для цього у вигляді двох слів «and print». Також, в разі використання лише слова «catch», буде додано універсальний обробник виключних ситуацій. Це продемонстровано на прикладі нижче.",tryWith:"Для використання конструкції «try-with-params» після слова «try» необхідно використати слово «with» та вказати необхідні аргументи для виконання.",codeGen:"Генерування коду",toGenCode:"Для генерування коду використовуйте наступний шаблон:",toGenCodeForSpecific:"Для геттеру або сеттеру для певного поля використовуйте наступні шаблони:",staticFieldsMethods:"Статичні поля та методи",staticClass:"Для отримання доступу к статичним полям та методам класу використовуйте наступну команду:",usefulCommands:"Корисні команди",itUsage:'За необхідності змінити останній введений вираз, необхідно використати певну команду з ключовим словом "it".',removeIt:"Для видалення останнього введеного виразу, необхідно використати наступну команду:",initializeIt:'Щоб ініціалізувати останню введену змінну чи поле, використовуйте наступний шаблон з ключовим словом "it":',expression:"вираз",continueTo:'Для спрощення переключень між областями видимості змінних та блоками було додано спеціальну команду "continue to". Вона дозволяє переключитись на попередню область видимості, яку ви вкажете. Використовуйте для переключень наступний шаблон команди:',whichOne:"який саме",previousMethod:"попередня область методу",previousDo:"попередня область циклу do-while",previousFor:"попередня область циклу for",previousIf:"попередня область умовного оператору if",previousElse:"попередній умовний оператор if та його область else",previousSwitch:"попередня область множинного оператору switch",previousCase:"попередній оператор switch та вказаний case в його області",previousDefault:"попередній оператор switch та його default",previousTry:"область попереднього оператора try-catch",previousCatch:"попередній оператор try-catch and вказаний case",previousFinally:"попередній оператор try-catch та його область finally",previousWhile:"попередній цикл while",sout:'Для полегшення виведення рядків у консоль було додано команду "s out":'}}}),o={name:"App",data:function(){return{languages:[{flag:"us",language:"en",title:"English"},{flag:"ua",language:"ua",title:"Українська"}],langExpanded:1}},methods:{changeLocale:function(e){n.locale=e,this.langExpanded=this.langExpanded+1,this.langExpanded>=10&&(this.langExpanded=1)}},link:[{rel:"icon",type:"image/x-icon",href:"/favicon.ico"},{rel:"stylesheet",href:"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons"}]},d={render:function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{attrs:{id:"app"}},[s("div",{attrs:{id:"tutorials_component"}},[s("v-expansion-panels",{staticClass:"tm",attrs:{value:e.langExpanded}},[s("v-expansion-panel",{staticStyle:{width:"100vw"}},[s("v-expansion-panel-header",[e._v(e._s(e.$t("chooseLanguage")))]),e._v(" "),s("v-expansion-panel-content",{staticClass:"justified"},[s("div",{attrs:{id:"lang_buttons_container"}},e._l(e.languages,function(t){return s("button",{key:t.title,staticClass:"lang_buttons",on:{click:function(s){return e.changeLocale(t.language)}}},[s("flag",{attrs:{iso:t.flag,squared:!1}}),e._v(" "+e._s(t.title)+"\n            ")],1)}),0)])],1)],1),e._v(" "),s("p",{staticClass:"justified tm indented"},[e._v(e._s(e.$t("toGetCorrectData")))]),e._v(" "),s("p",{staticClass:"justified indented"},[s("strong",[e._v(e._s(e.$t("important")))]),e._v(": "+e._s(e.$t("atTheMoment")))]),e._v(" "),s("v-expansion-panels",{staticClass:"tm",attrs:{id:"panels_block"}},[s("v-expansion-panel",[s("v-expansion-panel-header",[e._v(e._s(e.$t("classCreation")))]),e._v(" "),s("v-expansion-panel-content",{staticClass:"justified"},[s("p",{staticClass:"justified indented"},[e._v(e._s(e.$t("toCreateClass")))]),e._v(" "),s("p",{staticClass:"code centered"},[e._v("add / create class <"+e._s(e.$t("className"))+"> [extends <"+e._s(e.$t("className"))+">] [implements / implementing <"+e._s(e.$t("interfacesList"))+">] [with main]")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("add class employee extends person implementing driver")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("public class Employee extends Person implements Driver {")]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("}")]),e._v(" "),s("p",{staticClass:"justified tm-s"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("add class server with main")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("public class Server {")]),e._v(" "),s("p",{staticClass:"code double-indented"},[e._v("public static void main(String[] arguments) {")]),e._v(" "),s("p",{staticClass:"code double-indented"},[e._v("}")]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("}")])])],1),e._v(" "),s("v-expansion-panel",[s("v-expansion-panel-header",[e._v(e._s(e.$t("variablesDeclaring")))]),e._v(" "),s("v-expansion-panel-content",{staticClass:"justified"},[s("p",{staticClass:"justified indented"},[e._v(e._s(e.$t("toDeclareVariable")))]),e._v(" "),s("p",{staticClass:"code centered"},[e._v("add variable <"+e._s(e.$t("variableName"))+"> of <"+e._s(e.$t("typeName"))+">")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("add variable counter of integer equals 10")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("int counter = 10;")]),e._v(" "),s("p",{staticClass:"justified tm-s"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("add variable switcher of object boolean equals null")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("Boolean switcher = null;")]),e._v(" "),s("p",{staticClass:"justified indented"},[e._v(e._s(e.$t("bySeparator")))]),e._v(" "),s("p",{staticClass:"code centered"},[e._v("add variable <"+e._s(e.$t("variableName"))+"> of <"+e._s(e.$t("typeName"))+"> by <"+e._s(e.$t("templateTypeName"))+">")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("add variable items of list by person")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("List<Person> items;")]),e._v(" "),s("p",{staticClass:"justified tm-s"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("add variable families of map by string and list by person")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("Map<String, List<Person>> families;")]),e._v(" "),s("p",{staticClass:"justified tm-s"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("add variable pair of pair by string and object integer")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("Pair<String, Integer> pair;")]),e._v(" "),s("p",{staticClass:"justified tm-s"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("add variable pair of pair by string comma object integer")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("Pair<String, Integer> pair;")]),e._v(" "),s("p",{staticClass:"justified tm-s"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("add variable items of pair by list by string separator map by string and integer")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("Pair<List<String>, Map<String, Integer>> items;")]),e._v(" "),s("p",{staticClass:"justified indented"},[e._v(e._s(e.$t("anyExtends")))]),e._v(" "),s("p",{staticClass:"code centered"},[e._v("add variable <"+e._s(e.$t("variableName"))+"> of <"+e._s(e.$t("typeName"))+">")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("add variable items of list by any extends number")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("List<? extends Number> items;")])])],1),e._v(" "),s("v-expansion-panel",[s("v-expansion-panel-header",[e._v(e._s(e.$t("operations")))]),e._v(" "),s("v-expansion-panel-content",{staticClass:"justified"},[s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("inTable")))]),e._v(" "),s("div",{staticClass:"table"},[s("table",{staticClass:"tm-s"},[s("tr",[s("td",[s("p",{staticClass:"centered"},[s("strong",[e._v(e._s(e.$t("symbolU")))])])]),e._v(" "),s("td",[s("p",{staticClass:"centered"},[s("strong",[e._v(e._s(e.$t("equivalentU")))])])])]),e._v(" "),s("tr",[s("td",[s("p",{staticClass:"code centered"},[e._v("++")])]),e._v(" "),s("td",[s("p",{staticClass:"code centered"},[e._v("increment")])])]),e._v(" "),s("tr",[s("td",[s("p",{staticClass:"code centered"},[e._v("--")])]),e._v(" "),s("td",[s("p",{staticClass:"code centered"},[e._v("decrement")])])]),e._v(" "),s("tr",[s("td",[s("p",{staticClass:"code centered"},[e._v("+= <"+e._s(e.$t("numberLow"))+">")])]),e._v(" "),s("td",[s("p",{staticClass:"code centered"},[e._v("increment by <"+e._s(e.$t("numberLow"))+">")])])]),e._v(" "),s("tr",[s("td",[s("p",{staticClass:"code centered"},[e._v("-= <"+e._s(e.$t("numberLow"))+">")])]),e._v(" "),s("td",[s("p",{staticClass:"code centered"},[e._v("decrement by <"+e._s(e.$t("numberLow"))+">")])])]),e._v(" "),s("tr",[s("td",[s("p",{staticClass:"code centered"},[e._v("&")])]),e._v(" "),s("td",[s("p",{staticClass:"code centered"},[e._v("bitwise and")])])]),e._v(" "),s("tr",[s("td",[s("p",{staticClass:"code centered"},[e._v("|")])]),e._v(" "),s("td",[s("p",{staticClass:"code centered"},[e._v("bitwise or")])])]),e._v(" "),s("tr",[s("td",[s("p",{staticClass:"code centered"},[e._v("!")])]),e._v(" "),s("td",[s("p",{staticClass:"code centered"},[e._v("isn't")])])])])]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("ternary")))]),e._v(" "),s("p",{staticClass:"code centered"},[e._v("ternary if <"+e._s(e.$t("condition"))+"> then <"+e._s(e.$t("firstOption"))+"> else <"+e._s(e.$t("secondOption"))+">")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("c equals ternary if a > b then a else b")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("c = a > b ? a : b;")])])],1),e._v(" "),s("v-expansion-panel",[s("v-expansion-panel-header",[e._v(e._s(e.$t("fieldsMethodsAccess")))]),e._v(" "),s("v-expansion-panel-content",{staticClass:"justified"},[s("p",{staticClass:"justified"},[e._v(e._s(e.$t("toAccessFields")))]),e._v(" "),s("p",{staticClass:"code centered"},[e._v("<"+e._s(e.$t("variableName"))+"> get [field] <"+e._s(e.$t("fieldName"))+">")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("toAccessMethods")))]),e._v(" "),s("p",{staticClass:"code centered"},[e._v("<"+e._s(e.$t("variableName"))+"> call [method] <"+e._s(e.$t("methodName"))+">")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("person get name")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("person.name")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("person call dance")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("person.dance()")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("toPassArgumentsConstr")))]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("new string with argument quotation string quotation")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v('new String("string")')])])],1),e._v(" "),s("v-expansion-panel",[s("v-expansion-panel-header",[e._v(e._s(e.$t("arraysAccess")))]),e._v(" "),s("v-expansion-panel-content",{staticClass:"justified"},[s("p",{staticClass:"justified"},[e._v(e._s(e.$t("toCreateArray")))]),e._v(" "),s("p",{staticClass:"justified tm-s"},[s("strong",[e._v(e._s(e.$t("important")))]),e._v(": "+e._s(e.$t("importantArray")))]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("one dimensional array of int called i equals empty array")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("int[] i = {};")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("generic array of int called i equals empty array")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("int[] i = {};")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("4 by 4 array of integer called array")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("int[][] array = new int[4][4];")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("4 by generic/empty of int called array")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("int[][] array = new int[4][];")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("initializedBy")))]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v('generic array of string called strings equals new string array initialized by block start "string1", "string2", "string3" block end')]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v('String[] strings = new String()[] {"string1", "string2", "string3"};')]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("accessArrayElement")))]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("add 4 by 4 array of integer called array new row array at 0 at 0 equals to 5")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("int[][] array = new int[4][4];")]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("array[0][0] = 5;")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("newRow")))])])],1),e._v(" "),s("v-expansion-panel",[s("v-expansion-panel-header",[e._v(e._s(e.$t("typesCasting")))]),e._v(" "),s("v-expansion-panel-content",{staticClass:"justified"},[s("p",{staticClass:"justified"},[e._v(e._s(e.$t("toCastType")))]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("... = a call method chase casted to string")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("... = (String) a.chase()")])])],1),e._v(" "),s("v-expansion-panel",[s("v-expansion-panel-header",[e._v("If-Else")]),e._v(" "),s("v-expansion-panel-content",{staticClass:"justified"},[s("p",{staticClass:"justified"},[e._v(e._s(e.$t("ifElseUsage")))]),e._v(" "),s("p",{staticClass:"code centered"},[e._v("if <"+e._s(e.$t("condition"))+"> then / block start ... block end [else block start ... block end]")])])],1),e._v(" "),s("v-expansion-panel",[s("v-expansion-panel-header",[e._v("For")]),e._v(" "),s("v-expansion-panel-content",{staticClass:"justified"},[s("p",{staticClass:"justified"},[e._v(e._s(e.$t("forLoops")))]),e._v(" "),s("p",{staticClass:"code centered"},[e._v("for <"+e._s(e.$t("variableInitialization"))+"> when <"+e._s(e.$t("condition"))+"> then <"+e._s(e.$t("iteratorBehaviour"))+">")]),e._v(" "),s("p",{staticClass:"code centered"},[e._v("for [each] <"+e._s(e.$t("variableName"))+"> in range [from] <"+e._s(e.$t("numberOrSymbol"))+"> to <"+e._s(e.$t("numberOrSymbol"))+">")]),e._v(" "),s("p",{staticClass:"code centered"},[e._v("for [each] <"+e._s(e.$t("variableName"))+"> [of <"+e._s(e.$t("variableType"))+">] in <Iterable-"+e._s(e.$t("object"))+">")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("for i of integer equals 0 when i lesser 10 then i incremented by 2 do")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("for (int i = 0; i < 10; i += 2){")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("for index in range from 2 to 10 do / block")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("for (int index = 2; index <= 10; index++) {")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("for character in range from z to a do / block")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("for (char character = ‘z’; character => ‘a’; character--){")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("for c of character / char in string call to char array do / block")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("for (char c : string.toCharArray()){")])])],1),e._v(" "),s("v-expansion-panel",[s("v-expansion-panel-header",[e._v("While "+e._s(e.$t("and"))+" Do/While")]),e._v(" "),s("v-expansion-panel-content",{staticClass:"justified"},[s("p",{staticClass:"justified"},[e._v(e._s(e.$t("whileDoWhile")))]),e._v(" "),s("p",{staticClass:"code centered"},[e._v("while <"+e._s(e.$t("condition"))+"> then / block start ... block end")]),e._v(" "),s("p",{staticClass:"code centered"},[e._v("do <"+e._s(e.$t("someOperations"))+"> then / block start ... block end while <"+e._s(e.$t("condition"))+">")])])],1),e._v(" "),s("v-expansion-panel",[s("v-expansion-panel-header",[e._v("Switch")]),e._v(" "),s("v-expansion-panel-content",{staticClass:"justified"},[s("p",{staticClass:"justified"},[e._v(e._s(e.$t("switchUsage")))]),e._v(" "),s("p",{staticClass:"code centered"},[e._v("switch <"+e._s(e.$t("argumentL"))+"> in case <"+e._s(e.$t("condition"))+"> do … [default] … block end / switch end")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("switch value in case 1 do break in case 5 do value increment default return 0 block end")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("switch (value) {")]),e._v(" "),s("p",{staticClass:"code double-indented"},[e._v("case 1:")]),e._v(" "),s("p",{staticClass:"code triple-indented"},[e._v("break;")]),e._v(" "),s("p",{staticClass:"code double-indented"},[e._v("case 5:")]),e._v(" "),s("p",{staticClass:"code triple-indented"},[e._v("value++;")]),e._v(" "),s("p",{staticClass:"code double-indented"},[e._v("default:")]),e._v(" "),s("p",{staticClass:"code triple-indented"},[e._v("return 0;")]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("}")])])],1),e._v(" "),s("v-expansion-panel",[s("v-expansion-panel-header",[e._v(e._s(e.$t("classFieldsMethods")))]),e._v(" "),s("v-expansion-panel-content",{staticClass:"justified"},[s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("toAddField")))]),e._v(" "),s("p",{staticClass:"code centered"},[e._v("add [new] field <"+e._s(e.$t("variableName"))+"> of <"+e._s(e.$t("typeName"))+"> ...")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("toCreateMethod")))]),e._v(" "),s("p",{staticClass:"code centered"},[e._v("add/create/define [new] method <"+e._s(e.$t("methodName"))+"> [with parameter(s) <"+e._s(e.$t("parametersList"))+">] [returning <"+e._s(e.$t("typeName"))+">] block start")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("for i of integer equals 0 when i lesser 10 then i incremented by 2 do")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("for (int i = 0; i < 10; i += 2){")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("importantToRemember1"))+" "),s("strong",[e._v(e._s(e.$t("parameters")))]),e._v(" "+e._s(e.$t("importantToRemember2"))+" "),s("strong",[e._v(e._s(e.$t("arguments")))]),e._v(e._s(e.$t("importantToRemember3")))]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("add method is this useful with parameter circumstances of object returning boolean block")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("boolean isThisUseful(Object circumstances) {")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("define method move with parameter forward of integer")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("void move(int forward)")])])],1),e._v(" "),s("v-expansion-panel",[s("v-expansion-panel-header",[e._v("Try - Catch")]),e._v(" "),s("v-expansion-panel-content",{staticClass:"justified"},[s("p",{staticClass:"justified"},[e._v(e._s(e.$t("tryCatchUsage")))]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("catch index out of bound exception and print catch")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("catch (IndexOutOfBoundException e) {")]),e._v(" "),s("p",{staticClass:"code double-indented"},[e._v("e.printStackTrace();")]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("}")]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("catch (Exception e) {")]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("}")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("tryWith")))])])],1),e._v(" "),s("v-expansion-panel",[s("v-expansion-panel-header",[e._v(e._s(e.$t("codeGen")))]),e._v(" "),s("v-expansion-panel-content",{staticClass:"justified"},[s("p",{staticClass:"justified"},[e._v(e._s(e.$t("toGenCode")))]),e._v(" "),s("p",{staticClass:"tm code centered"},[e._v("generate [constructor / constructors] [and] [getters] [and] [setters]")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("toGenCodeForSpecific")))]),e._v(" "),s("p",{staticClass:"tm code centered"},[e._v("generate [modifier] getter for <"+e._s(e.$t("fieldName"))+"]>")]),e._v(" "),s("p",{staticClass:"tm code centered"},[e._v("generate [modifier] setter for <"+e._s(e.$t("fieldName"))+"]>")])])],1),e._v(" "),s("v-expansion-panel",[s("v-expansion-panel-header",[e._v(e._s(e.$t("staticFieldsMethods")))]),e._v(" "),s("v-expansion-panel-content",{staticClass:"justified"},[s("p",{staticClass:"justified"},[e._v(e._s(e.$t("staticClass")))]),e._v(" "),s("p",{staticClass:"tm code centered"},[e._v("static class <"+e._s(e.$t("className"))+"> [get field <"+e._s(e.$t("fieldName"))+">] [call method <"+e._s(e.$t("methodName"))+">]")])])],1),e._v(" "),s("v-expansion-panel",[s("v-expansion-panel-header",[e._v(e._s(e.$t("usefulCommands")))]),e._v(" "),s("v-expansion-panel-content",{staticClass:"justified"},[s("p",{staticClass:"justified"},[e._v(e._s(e.$t("itUsage")))]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("removeIt")))]),e._v(" "),s("p",{staticClass:"tm code centered"},[e._v("remove it")]),e._v(" "),s("p",{staticClass:"tm code centered"},[e._v("delete it")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("initializeIt")))]),e._v(" "),s("p",{staticClass:"tm code centered"},[e._v("initialize it by <"+e._s(e.$t("expression"))+">")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("add field name of string")]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("add field number of integer")]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("initialize it by 2 + 2")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("String name;")]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("int number = 2 + 2;")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("continueTo")))]),e._v(" "),s("p",{staticClass:"tm code centered"},[e._v("continue to [method / do / for / if / else / switch / case / default / try / catch / finally / while]")]),e._v(" "),s("p",{staticClass:"justified indented tm-s"},[e._v("- "),s("span",{staticClass:"code"},[e._v("method")]),e._v(": "+e._s(e.$t("previousMethod")))]),e._v(" "),s("p",{staticClass:"justified indented tm-s"},[e._v("- "),s("span",{staticClass:"code"},[e._v("do")]),e._v(": "+e._s(e.$t("previousDo")))]),e._v(" "),s("p",{staticClass:"justified indented tm-s"},[e._v("- "),s("span",{staticClass:"code"},[e._v("for")]),e._v(": "+e._s(e.$t("previousFor")))]),e._v(" "),s("p",{staticClass:"justified indented tm-s"},[e._v("- "),s("span",{staticClass:"code"},[e._v("if")]),e._v(": "+e._s(e.$t("previousIf")))]),e._v(" "),s("p",{staticClass:"justified indented tm-s"},[e._v("- "),s("span",{staticClass:"code"},[e._v("else")]),e._v(": "+e._s(e.$t("previousElse")))]),e._v(" "),s("p",{staticClass:"justified indented tm-s"},[e._v("- "),s("span",{staticClass:"code"},[e._v("switch")]),e._v(": "+e._s(e.$t("previousSwitch")))]),e._v(" "),s("p",{staticClass:"justified indented tm-s"},[e._v("- "),s("span",{staticClass:"code"},[e._v("case")]),e._v(" <"+e._s(e.$t("whichOne"))+">: "+e._s(e.$t("previousCase")))]),e._v(" "),s("p",{staticClass:"justified indented tm-s"},[e._v("- "),s("span",{staticClass:"code"},[e._v("default")]),e._v(": "+e._s(e.$t("previousDefault")))]),e._v(" "),s("p",{staticClass:"justified indented tm-s"},[e._v("- "),s("span",{staticClass:"code"},[e._v("try")]),e._v(": "+e._s(e.$t("previousTry")))]),e._v(" "),s("p",{staticClass:"justified indented tm-s"},[e._v("- "),s("span",{staticClass:"code"},[e._v("catch")]),e._v(": "+e._s(e.$t("previousCatch")))]),e._v(" "),s("p",{staticClass:"justified indented tm-s"},[e._v("- "),s("span",{staticClass:"code"},[e._v("finally")]),e._v(": "+e._s(e.$t("previousFinally")))]),e._v(" "),s("p",{staticClass:"justified indented tm-s"},[e._v("- "),s("span",{staticClass:"code"},[e._v("while")]),e._v(": "+e._s(e.$t("previousWhile")))]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("sout")))]),e._v(" "),s("p",{staticClass:"tm code centered"},[e._v("s out <"+e._s(e.$t("expression"))+">")]),e._v(" "),s("p",{staticClass:"justified tm"},[e._v(e._s(e.$t("exampleU")))]),e._v(" "),s("p",{staticClass:"code justified indented"},[e._v("s out a")]),e._v(" "),s("p",{staticClass:"justified"},[e._v(e._s(e.$t("resultU")))]),e._v(" "),s("p",{staticClass:"code indented"},[e._v("System.out.println(a);")])])],1)],1)],1)])},staticRenderFns:[]};var c=s("VU/8")(o,d,!1,function(e){s("EO8Z")},null,null).exports,l=(s("csSS"),s("3EgV")),r=s.n(l);s("7zck");a.default.use(r.a);var v=new r.a({icons:{iconfont:"mdi"}}),_=s("StEu");a.default.config.productionTip=!1,a.default.use(_.a),new a.default({el:"#app",vuetify:v,i18n:n,components:{App:c},template:"<App/>"})},OlBK:function(e,t){},csSS:function(e,t){},scIF:function(e,t,s){"use strict";var a={name:"flag",props:{iso:{type:String,default:null},title:{type:String,default:null},squared:{type:Boolean,default:!0}},computed:{flagIconClass:function(){return(this.squared?"flag-icon-squared ":"")+"flag-icon-"+this.iso.toLowerCase()}}},i={render:function(){var e=this.$createElement,t=this._self._c||e;return this.iso?t("span",{staticClass:"flag-icon",class:this.flagIconClass,attrs:{title:this.title||this.iso}}):this._e()},staticRenderFns:[]};var n=s("VU/8")(a,i,!1,function(e){s("xs5p")},null,null);t.a=n.exports},xs5p:function(e,t){}},["NHnr"]);
//# sourceMappingURL=app.4c8d4e0828ba6bfe8bf6.js.map